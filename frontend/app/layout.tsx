// import type { Metadata } from "next";
// import { Geist, Geist_Mono } from "next/font/google";
// import "./globals.css";

// const geistSans = Geist({
//   variable: "--font-geist-sans",
//   subsets: ["latin"],
// });

// const geistMono = Geist_Mono({
//   variable: "--font-geist-mono",
//   subsets: ["latin"],
// });

// export const metadata: Metadata = {
//   title: "Create Next App",
//   description: "Generated by create next app",
// };

// export default function RootLayout({
//   children,
// }: Readonly<{
//   children: React.ReactNode;
// }>) {
//   return (
//     <html lang="en">
//       <body
//         className={`${geistSans.variable} ${geistMono.variable} antialiased`}
//       >
//         {children}
//       </body>
//     </html>
//   );
// }

// 'use client';
// import './globals.css';
// import { store } from '../store';
// import { Provider } from 'react-redux';
// import { useEffect } from 'react';
// import { loadResidents } from '../store/residentsSlice';

// export default function RootLayout({
//   children,
// }: {
//   children: React.ReactNode;
// }) {
//   //fetch residents from pouchdb into redux
//   useEffect(() => {
//     store.dispatch<any>(loadResidents());
//   }, []);

//   return (
//     <html lang='en'>
//       <body>
//         <Provider store={store}>{children}</Provider>
//       </body>
//     </html>
//   );
// }
'use client';
import './globals.css';
import dynamic from 'next/dynamic';

// dynamically import StoreProvider with SSR disabled
const StoreProvider = dynamic(
  () => import('./StoreProvider').then((mod) => mod.StoreProvider),
  { ssr: false }
);

export default function RootLayout({
  children,
}: {
  children: React.ReactNode;
}) {
  return (
    <html lang='en'>
      <body>
        <StoreProvider>{children}</StoreProvider>
      </body>
    </html>
  );
}
